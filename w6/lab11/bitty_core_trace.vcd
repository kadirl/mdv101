$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 Q clk $end
  $var wire 1 R reset $end
  $var wire 16 S instruction [15:0] $end
  $var wire 1 T run $end
  $var wire 1 U done $end
  $var wire 16 V reg_instr_out [15:0] $end
  $var wire 16 W reg_s_out [15:0] $end
  $var wire 16 X reg_c_out [15:0] $end
  $var wire 16 Y reg0_out [15:0] $end
  $var wire 16 Z reg1_out [15:0] $end
  $var wire 16 [ reg2_out [15:0] $end
  $var wire 16 \ reg3_out [15:0] $end
  $var wire 16 ] reg4_out [15:0] $end
  $var wire 16 ^ reg5_out [15:0] $end
  $var wire 16 _ reg6_out [15:0] $end
  $var wire 16 ` reg7_out [15:0] $end
  $var wire 16 a mux_out [15:0] $end
  $var wire 16 b alu_out [15:0] $end
  $scope module bitty_core $end
   $var wire 1 Q clk $end
   $var wire 1 R reset $end
   $var wire 16 S instruction [15:0] $end
   $var wire 1 T run $end
   $var wire 1 U done $end
   $var wire 16 V reg_instr_out [15:0] $end
   $var wire 16 W reg_s_out [15:0] $end
   $var wire 16 X reg_c_out [15:0] $end
   $var wire 16 Y reg0_out [15:0] $end
   $var wire 16 Z reg1_out [15:0] $end
   $var wire 16 [ reg2_out [15:0] $end
   $var wire 16 \ reg3_out [15:0] $end
   $var wire 16 ] reg4_out [15:0] $end
   $var wire 16 ^ reg5_out [15:0] $end
   $var wire 16 _ reg6_out [15:0] $end
   $var wire 16 ` reg7_out [15:0] $end
   $var wire 16 a mux_out [15:0] $end
   $var wire 16 b alu_out [15:0] $end
   $var wire 1 # en_i $end
   $var wire 1 $ en_s $end
   $var wire 1 % en_c $end
   $var wire 1 & en_0 $end
   $var wire 1 ' en_1 $end
   $var wire 1 ( en_2 $end
   $var wire 1 ) en_3 $end
   $var wire 1 * en_4 $end
   $var wire 1 + en_5 $end
   $var wire 1 , en_6 $end
   $var wire 1 - en_7 $end
   $var wire 1 . mode $end
   $var wire 1 c cmp $end
   $var wire 1 / cout $end
   $var wire 4 0 alu_sel [3:0] $end
   $var wire 3 1 mux_sel [2:0] $end
   $var wire 16 2 mux_in_array[0] [15:0] $end
   $var wire 16 3 mux_in_array[1] [15:0] $end
   $var wire 16 4 mux_in_array[2] [15:0] $end
   $var wire 16 5 mux_in_array[3] [15:0] $end
   $var wire 16 6 mux_in_array[4] [15:0] $end
   $var wire 16 7 mux_in_array[5] [15:0] $end
   $var wire 16 8 mux_in_array[6] [15:0] $end
   $var wire 16 9 mux_in_array[7] [15:0] $end
   $scope module alu_inst $end
    $var wire 1 d carry_in $end
    $var wire 16 W in_a [15:0] $end
    $var wire 16 a in_b [15:0] $end
    $var wire 4 0 select [3:0] $end
    $var wire 1 . mode $end
    $var wire 1 / carry_out $end
    $var wire 1 c compare $end
    $var wire 16 b alu_out [15:0] $end
    $var wire 16 : arithmetic_out [15:0] $end
    $var wire 16 ; logic_out [15:0] $end
    $var wire 1 c compare_out $end
    $scope module AU $end
     $var wire 1 d carry_in $end
     $var wire 16 W in_a [15:0] $end
     $var wire 16 a in_b [15:0] $end
     $var wire 4 0 select [3:0] $end
     $var wire 16 : ar_out [15:0] $end
     $var wire 1 / carry_out $end
     $var wire 1 c comp_out [0:0] $end
     $var wire 16 < ab [15:0] $end
     $var wire 16 = anotb [15:0] $end
     $var wire 16 > aorb [15:0] $end
     $var wire 16 ? aornotb [15:0] $end
    $upscope $end
    $scope module LU $end
     $var wire 16 W in_a [15:0] $end
     $var wire 16 a in_b [15:0] $end
     $var wire 4 0 select [3:0] $end
     $var wire 16 ; log_out [15:0] $end
    $upscope $end
   $upscope $end
   $scope module control_inst $end
    $var wire 16 V d_in [15:0] $end
    $var wire 1 Q clk $end
    $var wire 1 R reset $end
    $var wire 1 T run $end
    $var wire 4 0 alu_sel [3:0] $end
    $var wire 1 . alu_mode $end
    $var wire 3 1 mux_sel [2:0] $end
    $var wire 1 $ en_s $end
    $var wire 1 % en_c $end
    $var wire 1 & en_0 $end
    $var wire 1 ' en_1 $end
    $var wire 1 ( en_2 $end
    $var wire 1 ) en_3 $end
    $var wire 1 * en_4 $end
    $var wire 1 + en_5 $end
    $var wire 1 , en_6 $end
    $var wire 1 - en_7 $end
    $var wire 1 # en_i $end
    $var wire 1 U done $end
    $var wire 2 e STATE0 [1:0] $end
    $var wire 2 f STATE1 [1:0] $end
    $var wire 2 g STATE2 [1:0] $end
    $var wire 2 h STATE3 [1:0] $end
    $var wire 3 @ rx [2:0] $end
    $var wire 3 A ry [2:0] $end
    $var wire 3 B res1 [2:0] $end
    $var wire 2 C res2 [1:0] $end
    $var wire 2 D state [1:0] $end
    $var wire 2 E next_state [1:0] $end
   $upscope $end
   $scope module mux_inst $end
    $var wire 16 2 in[0] [15:0] $end
    $var wire 16 3 in[1] [15:0] $end
    $var wire 16 4 in[2] [15:0] $end
    $var wire 16 5 in[3] [15:0] $end
    $var wire 16 6 in[4] [15:0] $end
    $var wire 16 7 in[5] [15:0] $end
    $var wire 16 8 in[6] [15:0] $end
    $var wire 16 9 in[7] [15:0] $end
    $var wire 3 1 sel [2:0] $end
    $var wire 16 a out [15:0] $end
   $upscope $end
   $scope module reg0_inst $end
    $var wire 16 X d_in [15:0] $end
    $var wire 1 R reset $end
    $var wire 1 Q clk $end
    $var wire 1 & en $end
    $var wire 16 Y d_out [15:0] $end
    $var wire 16 F storage [15:0] $end
   $upscope $end
   $scope module reg1_inst $end
    $var wire 16 X d_in [15:0] $end
    $var wire 1 R reset $end
    $var wire 1 Q clk $end
    $var wire 1 ' en $end
    $var wire 16 Z d_out [15:0] $end
    $var wire 16 G storage [15:0] $end
   $upscope $end
   $scope module reg2_inst $end
    $var wire 16 X d_in [15:0] $end
    $var wire 1 R reset $end
    $var wire 1 Q clk $end
    $var wire 1 ( en $end
    $var wire 16 [ d_out [15:0] $end
    $var wire 16 H storage [15:0] $end
   $upscope $end
   $scope module reg3_inst $end
    $var wire 16 X d_in [15:0] $end
    $var wire 1 R reset $end
    $var wire 1 Q clk $end
    $var wire 1 ) en $end
    $var wire 16 \ d_out [15:0] $end
    $var wire 16 I storage [15:0] $end
   $upscope $end
   $scope module reg4_inst $end
    $var wire 16 X d_in [15:0] $end
    $var wire 1 R reset $end
    $var wire 1 Q clk $end
    $var wire 1 * en $end
    $var wire 16 ] d_out [15:0] $end
    $var wire 16 J storage [15:0] $end
   $upscope $end
   $scope module reg5_inst $end
    $var wire 16 X d_in [15:0] $end
    $var wire 1 R reset $end
    $var wire 1 Q clk $end
    $var wire 1 + en $end
    $var wire 16 ^ d_out [15:0] $end
    $var wire 16 K storage [15:0] $end
   $upscope $end
   $scope module reg6_inst $end
    $var wire 16 X d_in [15:0] $end
    $var wire 1 R reset $end
    $var wire 1 Q clk $end
    $var wire 1 , en $end
    $var wire 16 _ d_out [15:0] $end
    $var wire 16 L storage [15:0] $end
   $upscope $end
   $scope module reg7_inst $end
    $var wire 16 X d_in [15:0] $end
    $var wire 1 R reset $end
    $var wire 1 Q clk $end
    $var wire 1 - en $end
    $var wire 16 ` d_out [15:0] $end
    $var wire 16 M storage [15:0] $end
   $upscope $end
   $scope module reg_c_inst $end
    $var wire 16 b d_in [15:0] $end
    $var wire 1 R reset $end
    $var wire 1 Q clk $end
    $var wire 1 % en $end
    $var wire 16 X d_out [15:0] $end
    $var wire 16 N storage [15:0] $end
   $upscope $end
   $scope module reg_instr_inst $end
    $var wire 16 S d_in [15:0] $end
    $var wire 1 R reset $end
    $var wire 1 Q clk $end
    $var wire 1 # en $end
    $var wire 16 V d_out [15:0] $end
    $var wire 16 O storage [15:0] $end
   $upscope $end
   $scope module reg_s_inst $end
    $var wire 16 a d_in [15:0] $end
    $var wire 1 R reset $end
    $var wire 1 Q clk $end
    $var wire 1 $ en $end
    $var wire 16 W d_out [15:0] $end
    $var wire 16 P storage [15:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
0$
0%
0&
0'
0(
0)
0*
0+
0,
0-
0.
0/
b0000 0
b000 1
b0000000000000000 2
b0000000000000000 3
b0000000000000000 4
b0000000000000000 5
b0000000000000000 6
b0000000000000000 7
b0000000000000000 8
b0000000000000000 9
b0000000000000000 :
b1111111111111111 ;
b0000000000000000 <
b0000000000000000 =
b0000000000000000 >
b1111111111111111 ?
b000 @
b000 A
b000 B
b00 C
b00 D
b01 E
b0000000000000000 F
b0000000000000000 G
b0000000000000000 H
b0000000000000000 I
b0000000000000000 J
b0000000000000000 K
b0000000000000000 L
b0000000000000000 M
b0000000000000000 N
b0000000000000000 O
b0000000000000000 P
0Q
1R
b0000000000000000 S
0T
0U
b0000000000000000 V
b0000000000000000 W
b0000000000000000 X
b0000000000000000 Y
b0000000000000000 Z
b0000000000000000 [
b0000000000000000 \
b0000000000000000 ]
b0000000000000000 ^
b0000000000000000 _
b0000000000000000 `
b0000000000000000 a
b0000000000000000 b
1c
0d
b00 e
b01 f
b10 g
b11 h
#1
1Q
0R
#2
0Q
#3
0#
1$
b101 1
b101 @
b111 A
b01 D
b10 E
b1011110000001100 O
1Q
b1011110000001100 S
1T
b1011110000001100 V
#4
0Q
#5
0$
1%
1.
b0001 0
b111 1
b10 D
b11 E
1Q
b1111111111111111 b
#6
0Q
#7
0%
1+
0.
b0000 0
b000 1
b11 D
b00 E
b1111111111111111 N
1Q
1U
b1111111111111111 X
b0000000000000000 b
#8
0Q
#9
1#
0+
b1111111111111111 7
b00 D
b01 E
b1111111111111111 K
1Q
0U
b1111111111111111 ^
#10
0Q
#11
0#
1$
b101 1
b1111111111111111 >
b0000000000000000 ?
b01 D
b10 E
1Q
b1111111111111111 a
0c
#12
0Q
#13
0$
1%
1.
b0001 0
b111 1
b1111111111111111 :
b0000000000000000 ;
b1111111111111111 =
b1111111111111111 ?
b10 D
b11 E
b1111111111111111 P
1Q
b1111111111111111 W
b0000000000000000 a
#14
0Q
